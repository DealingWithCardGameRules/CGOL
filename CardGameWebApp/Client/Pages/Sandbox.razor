@page "/sandbox"
@using CardGameWebApp.Client.Components
@using CardGameWebApp.Shared.Responses
@using System.Net
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="row">
	<div class="col-xxl-5">
		<h1>Create and test sandbox</h1>

		<div class="btn-toolbar" role="toolbar" aria-label="Toolbar">
			<button type="button" class="btn btn-primary me-2" data-bs-toggle="offcanvas" data-bs-target="#playArea" @onclick="() => PlayGame()">
				<span class="oi oi-media-play me-2" aria-hidden="true"></span> Load
			</button>

			<div class="btn-group me-2" role="group" aria-label="Preloads">
				<div class="btn-group" role="group">
					<button id="btnGroupDrop1" type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
						Examples
					</button>
					<ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
						@foreach (var preload in preloads)
						{
						<li>
							<a class="dropdown-item" @onclick="() => SelectPreload(preload.Key)">@preload.Key</a>
						</li>
						}
					</ul>
				</div>
			</div>

			<button type="button" class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#playArea" @onclick="() => Reset()">
				<i class="fa-solid fa-rotate-right"></i> Reset
			</button>
		</div>

		<HighlightEditor @ref=highlighter></HighlightEditor>
	</div>
	<div class="col-xxl-7">
		<div class="input-group input-group-sm mb-3">
			<span class="input-group-text">Share link:</span>
			<input id="gamelink" type="text" class="form-control bg-white" aria-label="Game link" aria-describedby="button-addon2" value="@playUrl" readonly />
		</div>
		<GameSimulator @ref=@gameSim></GameSimulator>
	</div>
</div>

<!--
<div class="offcanvas offcanvas-end" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="playArea" aria-labelledby="offcanvasRightLabel">
	<div class="offcanvas-header">
		<h5 id="offcanvasRightLabel" class="my-0">Game</h5>
		<div class="input-group input-group-sm px-5">
			<span class="input-group-text">Invite:</span>
			<button class="btn btn-primary" type="button" onclick="$('#gamelink,#copygamelink').toggleClass('d-none');"><span class="oi oi-share"></span></button>
			<input id="gamelink" type="text" class="form-control d-none" aria-label="Game link" aria-describedby="button-addon2" value="@gameUrl" readonly />
			<button id="copygamelink" class="btn btn-primary d-none" type="button" onclick="copyText()"><span class="oi oi-clipboard"></span></button>
		</div>
		<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
	</div>
	<div class="offcanvas-body">
		<GameSimulator @ref=@gameSim></GameSimulator>
	</div>
</div>
-->

@code {
	private bool playing = false;
	private GameSimulator gameSim;
	private string playUrl = string.Empty;
	private GameIndexResponse game;
	private HighlightEditor highlighter;
	private SelectCardPrompt test;
	private SessionResponse session;

	private async void PlayGame()
	{
		game.Game.CGDLSource = highlighter.Value;
		var response = await Http.PostAsync(session.Links["game"], JsonContent.Create(game.Game));
		if (response.StatusCode == HttpStatusCode.OK)
		{
			session = await Http.GetFromJsonAsync<SessionResponse>(session.Links["self"]);
			if (session.Links.ContainsKey("concepts"))
				await highlighter.UpdateConcepts(session.Links["concepts"]);

			this.StateHasChanged();
		}
	}

	private async Task Reset()
	{
		game = await Http.GetFromJsonAsync<GameIndexResponse>("game");
		var response = await Http.PostAsync("sessions", JsonContent.Create(string.Empty));
		if (response.StatusCode == HttpStatusCode.Created)
		{
			session = await Http.GetFromJsonAsync<SessionResponse>(response.Headers.Location);
			if (session.Links.ContainsKey("concepts"))
				await highlighter.UpdateConcepts(session.Links["concepts"]);

			playUrl = $"{NavigationManager.ToAbsoluteUri("/play").AbsoluteUri}/{session.Links["game"].Encode64()}";
			await gameSim.Start(session.Links["game"]);
		}
		this.StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await Reset();
	}

	private Dictionary<string, string> preloads = new Dictionary<string, string>
	{
		{"Draw 1 play 1", "SetPlayers 1\n" +
							"CreateDeck \"deck\"\n" +
							"CreateDeck \"discard pile\"\n" +
							"CreateHand \"player\" 1\n" +
							"CreateCard \"pass\"\n" +
							"Instantaneous \"pass\" PlaceIn \"discard pile\"\n" +
							"AddCard \"pass\" \"deck\"\n" +
							"Play DrawCard \"deck\" \"player\"\n" +
							"Play PlayCard \"player\"" }
	};

	private void SelectPreload(string preload)
	{
		highlighter.Value = preloads[preload];
		this.StateHasChanged();
	}
}

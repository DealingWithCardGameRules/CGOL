@using CardGameWebApp.Shared.DTOs

<BSModal @ref="modal" IsStaticBackdrop="true" DataId="selectCardModal" Size="Size.ExtraLarge">
    <Header>Select a card</Header>
    <Content>
        @foreach (var card in cards)
        {
            var cardInfo = library.GetCard(card.Name);
            <div class="playcard @(selected == card.Instance ? "selected": "")" @onclick="() => selected = card.Instance">
                <h3>@(card.Name ?? card.Name)</h3>
		        @if(cardInfo.Illustration!=null)
		        {
			        <img class="illustration" src="/illustrations/@(cardInfo.Illustration).png" />
		        }
		        @if(cardInfo.Classification != null)
		        {
		        <p>@cardInfo.Classification</p>	
		        }
		        @if(cardInfo.Description != null)
		        {
		        <p class="description">@cardInfo.Description</p>	
		        }
            </div>
        }
    </Content>
    <Footer Context="modal">
        @if(!required)
        {
        <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="Cancel">Pass</BSButton>    
        }
        <BSButton Color="BSColor.Primary" @onclick="Select">Select</BSButton>
    </Footer>
</BSModal>

@code {
    private IEnumerable<CardRefDTO> cards = new CardRefDTO[0];
    private CardLibrary library = CardLibrary.Instance;
    private BSModal modal;
    private bool required;
    private Guid? selected;
    private double maxWait;
    private DateTime startTime;
    private double elapsedTime => (startTime - DateTime.Now).TotalSeconds;
    private Action<Guid?> onResult;

    public void Cancel()
    {
        modal.HideAsync();
        onResult.Invoke(null);
    }

    public void Select()
    {
        modal.HideAsync();
        onResult.Invoke(selected);
    }

    public async Task Select(IEnumerable<CardRefDTO> cards, Action<Guid?> result, bool required = false)
    {
        this.cards = cards;
        this.selected = cards.First().Instance;
        this.required = required;
        if (required)
            modal.ButtonClass = "d-none";
        await modal.ShowAsync();
        onResult = result;
    }
}
@using CardGameWebApp.Shared.Responses
@inject HttpClient Http

<!-- Community cards -->
@if (communities != null && communities.Any())
{
	<div>
		<h2>Community cards collections</h2>
	
	</div>
}

<!-- Decks -->

@if (decks != null && decks.Any())
{
	<div>
		<h2>Decks</h2>
	@foreach (var deck in decks.Select(d => collectionCache[d]))
	{
		<Deck FaceUp="false" NumberOfCards="deck.CardCollection.CardCount" Name="@deck.CardCollection.Name">
			@if (deck.CardCollection.VisibleCards.Any())
			{
				@foreach (var card in deck.CardCollection.VisibleCards)
				{
					<Card Title="@card.Name" Illustration="@card.Name"></Card>
					}
				}
			else
			{
				<p>@deck.CardCollection.Name</p>		
			}
		</Deck>
	}
	</div>
}

<!-- Hands -->
@if (hands != null && hands.Any())
{
	<div>
		<h2>Hands</h2>
	@foreach (var hand in hands.Select(h => collectionCache[h]))
	{
		<dev>
			@foreach (var card in hand.CardCollection.VisibleCards)
			{
				<Card Title="@card.Name" Illustration="@card.Name"></Card>
			}
		</dev>
	}		
	</div>
}

@code {
	private GameOverviewResponse game;
	private IEnumerable<string> communities = null;
	private IEnumerable<string> hands = null;
	private IEnumerable<string> decks = null;
	private Dictionary<string, CardCollectionResponse> collectionCache;

	public async void Start(string gameUrl)
	{
		collectionCache = new Dictionary<string, CardCollectionResponse>();
		hands = null;
		decks = null;

		game = await Http.GetFromJsonAsync<GameOverviewResponse>(gameUrl);

		foreach (var pair in game.Game.Hands)
			await UpdateCollectionCache(pair.Key, pair.Value);
		foreach (var pair in game.Game.Decks)
			await UpdateCollectionCache(pair.Key, pair.Value);

		hands = game.Game.Hands.Keys;
		decks = game.Game.Decks.Keys;
		this.StateHasChanged();
	}

	public async Task UpdateCollectionCache(string name, string url)
	{
		var response = await Http.GetFromJsonAsync<CardCollectionResponse>(url);
		if (collectionCache.ContainsKey(name))
			collectionCache[name] = response;
		else
			collectionCache.Add(name, response);
	}

}
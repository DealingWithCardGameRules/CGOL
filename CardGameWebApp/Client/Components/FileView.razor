@inject NavigationManager NavigationManager
@inject HttpClient Http

@{
    void ShowTree(string path, bool root = false)
    {
        @if (folderCache?.ContainsKey(path)??false)
        {
            var folderInfo = folderCache[path];
            <div class="list-group list-group-flush @(root?"list-group-root":"")">
            @foreach (var folder in folderInfo.folders)
            {

            var folderid = Guid.NewGuid().ToString();
            var fileid = Guid.NewGuid().ToString();
            var folderPath = $"{path}/{folder.Key}";

            <div class="list-group-item p-0 ps-3">
                <div class="row">
                    <div class="col-8">
                        <i class="fa-solid fa-folder"></i> @folder.Key
                    </div>
                    <div class="col-4 clearfix">
                        <div class="btn-group btn-group-sm float-end">
                            <button type="button" class="btn btn-link" title="Create folder" data-placement="top" data-toggle="tooltip"
                                onclick="$('#@folderid').toggleClass('d-none')">
                                <i class="fa-solid fa-folder-plus"></i>
                            </button>
                            <button type="button" class="btn btn-link" title="Create card description" data-placement="top" data-toggle="tooltip"
                                onclick="$('#@fileid').toggleClass('d-none')">
                                <i class="fa-solid fa-file-circle-plus"></i>
                            </button>
                            <button class="btn btn-link" title="Delete folder" data-placement="top" data-toggle="tooltip" @onclick="() => DeleteFolder(folderPath)">
                                <i class="text-danger fa-solid fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div>
                    <EzInput id="@folderid" class="d-none" OnClick="(foldername) => CreateFolder(folderPath, foldername)" Placeholder="Foldername">
                        <i class="fa-solid fa-folder-plus"></i>
                    </EzInput>
                    <EzInput id="@fileid" class="d-none" OnClick="(foldername) => CreateFile(folderPath, foldername)" Placeholder="CardDescription">
                        <i class="fa-solid fa-file-circle-plus"></i>
                    </EzInput>
                </div>
                @{
                    ShowTree(folderPath);
                }
            </div>
            }

            @foreach (var file in folderInfo.files)
            {
            <div class="list-group-item p-0 ps-3">
                <div class="row">
                    <div class="col-8">
                        <i class="fa-solid fa-file"></i> @file.Key
                    </div>
                    <div class="col-4 clearfix">
                        <div class="btn-group btn-group-sm float-end">
                            @if (sessionId != null)
                            {
                            <button class="btn btn-link" @onclick="() => LoadFile(file.Value)" title="Card description into session" data-placement="top" data-toggle="tooltip">
                                <i class="fa-solid fa-play"></i>
                            </button>                
                            }
                            <button class="btn btn-link" @onclick="() => EditFile(file.Value)" title="Edit card description" data-placement="top" data-toggle="tooltip">
                                <i class="fa-solid fa-file-pen"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            }
            </div>
        }
    }
}

<BSModal @ref="Popup">
    <Header>@PopupTitle</Header>
    <Content>
        <p>@PopupText</p>
    </Content>
    <Footer Context="modal">
        <BSButton Color="BSColor.Primary" @onclick="() => modal.HideAsync()">Ok</BSButton>
    </Footer>
</BSModal>

<ToastContainer @ref="Toast">
</ToastContainer>

<div class="row">
    <div class="col-2 col-sm-4">
        <div>
            <h5 class="d-inline-block">Files:</h5>
            <div class="btn-group btn-group-sm float-end" role="group">
                <button type="button" class="btn btn-link" title="Create new folder" data-placement="top" data-toggle="tooltip"
                onclick="$('#topfolder').toggleClass('d-none')">
                    <i class="fa-solid fa-folder-plus"></i>
                </button>
                <button type="button" class="btn btn-link" title="Create new card description" data-placement="top" data-toggle="tooltip"
                onclick="$('#topfile').toggleClass('d-none')">
                    <i class="fa-solid fa-file-circle-plus"></i>
                </button>
            </div>
            @{var path = ".";}
            <EzInput id="topfolder" class="d-none" OnClick="(foldername) => CreateFolder(path, foldername)" Placeholder="Foldername">
                <i class="fa-solid fa-folder-plus"></i>
            </EzInput>
            <EzInput id="topfile" class="d-none" OnClick="(filename) => CreateFile(path, filename)" Placeholder="CardDescription">
                <i class="fa-solid fa-file-circle-plus"></i>
            </EzInput>
        </div>
        @{
            ShowTree(".", true);
        }
    </div>
    <div class="col-10 col-sm-8">
    <h4>@SelectedFileName</h4>
    <HighlightEditor @ref="editor"></HighlightEditor>
    <button type="button" class="btn btn-primary" @onclick="SaveFile">Save</button>
    </div>
</div>

@code {
    [Parameter]
    public string Url { get; set; }

    private HighlightEditor editor;
    private Dictionary<string, StorageResponse> folderCache;
    private string SelectedFile { get; set; }
    private string SelectedFileName => SelectedFile?.Split("/").Last();
    private string PopupTitle { get; set; }
    private string PopupText { get; set; }
    private BSModal Popup { get; set; }
    private ToastContainer Toast { get; set; }
    public Guid? sessionId;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Url))
            Url = NavigationManager.ToAbsoluteUri("/persistence").AbsoluteUri;

        await Refresh();
    }

    private async void ShowPopup(string title, string text)
    {
        PopupTitle = title;
        PopupText = text;
        await Popup.ShowAsync();
    }

    private async void CreateFolder(string path, string foldername)
    {
        var folder = folderCache[path];
        await Http.PostAsync($"{folder.Links["self"]}/{foldername}", null);
        await Refresh();
        StateHasChanged();
    }

    private async void CreateFile(string path, string filename)
    {
        var folder = folderCache[path];
        await Http.PostAsync($"{folder.Links["file"]}/{filename}", null);
        await Refresh();
        StateHasChanged();
    }

    private async void SaveFile()
    {
        var response = await Http.PostAsync(SelectedFile, new StringContent(editor.Value));
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Toast.AddToast("File saved", $"{SelectedFileName} successfully saved.");
        }
    }

    private async void EditFile(string url)
    {
        SelectedFile = url;
        var text = await Http.GetStringAsync(url);
        editor.Value = text;
    }

    private async void LoadFile(string url)
    {
        await Http.GetAsync($"{url}?session={sessionId}");
    }

    private async void DeleteFolder(string path)
    {
        var folder = folderCache[path];
        var response = await Http.DeleteAsync(folder.Links["self"]);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await Refresh();
            this.StateHasChanged();
            Toast.AddToast("Folder deleted", "The requested folder was succesfully deleted.");
        }
        else
        {
            Toast.AddToast("Failed to delete folder!", $"Unable to delete requested folder: {await response.Content.ReadAsStringAsync()}");
        }
    }

    private async Task SearchFolder(string path, bool recursive = false)
    {
        foreach (var folder in folderCache[path].folders)
        {
            var folderInfo = await Http.GetFromJsonAsync<StorageResponse>(folder.Value);
            folderCache.Add($"{path}/{folder.Key}", folderInfo);
            if (recursive)
                await SearchFolder($"{path}/{folder.Key}", recursive);
        }
    }

    private async Task Refresh()
    {
        folderCache = new Dictionary<string, StorageResponse>();
        var topFolder = await Http.GetFromJsonAsync<StorageResponse>(Url);
        folderCache.Add(".", topFolder);
        await SearchFolder(".", true);
        StateHasChanged();
    }

    public async Task UpdateConcepts(string url)
    {
        await editor.UpdateConcepts(url);
    }

    public void SetSessionId(Guid id)
    {
        this.sessionId = id;
        StateHasChanged();
    }
}

@using CardGameWebApp.Shared.DTOs
@using CardGameWebApp.Shared.Inquiries
@using CardGameWebApp.Shared.Responses
@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http

<SelectCardPrompt @ref="cardPrompt"></SelectCardPrompt>
<YesNoPrompt @ref="Dialogue"></YesNoPrompt>

<div class="row">
	<div class="col-2">
		<!-- Player select -->
		@if (players != null)
		{
			<h3>Players</h3>
			<div class="btn-group" role="group">
			@for(int i = 0; i < players.Count; i++)
			{
				var playerIndex = i + 1;
				<button type="button" class="btn @(players[i] ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => TogglePlayer(playerIndex))" autocomplete="off">Player @(playerIndex)</button>
			}
			</div>
		}

		@if (GlobalActions != null)
		{
			<h3>Actions</h3>
			<!-- Available actions -->
			<div class="d-grid gap-2">
			@foreach(var action in GlobalActions)
			{
				<button type="button" class="btn btn-primary" @onclick="action.Execute">@action.Name</button>
			}
			</div>
		}
	</div>
	<div class="col-10">
		<!-- Community cards -->
		@if (zones != null && zones.Any())
		{
			<div>
				<h2>Community cards collections</h2>
			@foreach (var zone in zones.Select(h => collectionCache[h.Key]))
			{
				<Zone NumberOfCards="zone.CardCollection.CardCount" FaceUp="true">
					@foreach (var card in zone.CardCollection.VisibleCards)
					{
						<Card Template="@card.Name" Actions="() => GetActions(card.Actions)" />
					}
					@for(int i = 0; i < zone.CardCollection.CardCount - zone.CardCollection.VisibleCards.Count(); i++)
					{
						<div class="playcard">
							<div class="background" style="background-color: lightblue;">
								<p>@zone.CardCollection.Name</p>
							</div>
						</div>
					}
				</Zone>
			}
			</div>
		}

		<!-- Decks -->

		@if (decks != null && decks.Any())
		{
			<div>
				<h2>Decks</h2>
			@foreach (var deck in decks.Select(d => collectionCache[d.Key]))
			{
				<Deck FaceUp="false" NumberOfCards="deck.CardCollection.CardCount" 
					Name="@deck.CardCollection.Name" Actions="() => GetActions(deck.CardCollection.Actions)">
					@if (deck.CardCollection.VisibleCards.Any())
					{
						@foreach (var card in deck.CardCollection.VisibleCards)
						{
							<Card Template="@card.Name" />
						}
					}
					else
					{
						<p>@deck.CardCollection.Name</p>		
					}
				</Deck>
			}
			</div>
		}

		<!-- Hands -->
		@if (hands != null && hands.Any())
		{
			<div>
				<h2>Hands</h2>
			@foreach (var hand in hands.Select(h => collectionCache[h.Key]))
			{
				<Hand NumberOfCards="hand.CardCollection.CardCount" FaceUp="true">
					@foreach (var card in hand.CardCollection.VisibleCards)
					{
						<Card Template="@card.Name" Actions="() => GetActions(card.Actions)" />
					}
					@for(int i = 0; i < hand.CardCollection.CardCount - hand.CardCollection.VisibleCards.Count(); i++)
					{
						<div class="playcard">
							<div class="background" style="background-color: lightblue;">
								<p>@hand.CardCollection.Name</p>
							</div>
						</div>
					}
				</Hand>
			}
			</div>
		}
	</div>
</div>

@code {
	private GameOverviewResponse game;
	private IDictionary<string, string> zones = null;
	private IDictionary<string, string> hands = null;
	private IDictionary<string, string> decks = null;
	private Dictionary<string, CardCollectionResponse> collectionCache;
	private List<bool> players;
	private HubConnection? hubConnection;
	private SelectCardPrompt cardPrompt;
	private IEnumerable<CallBackAction> GlobalActions;
	private YesNoPrompt Dialogue { get; set; }

	public async Task Start(string gameUrl)
	{
		collectionCache = new Dictionary<string, CardCollectionResponse>();
		players = new List<bool>();
		hands = null;
		decks = null;

		game = await Http.GetFromJsonAsync<GameOverviewResponse>(gameUrl);

		for(int i = 0; i < game.Game.NumberOfPlayers; i++)
		{
			players.Add(false);
		}
		hubConnection = new HubConnectionBuilder().WithUrl(game.Links["hub"]).Build();
		hubConnection.On<int>("PlayerJoined", async (int i) =>
		{ 
			players[i-1] = true;
			await updateCache();
			this.StateHasChanged();
		});
		hubConnection.On<int>("PlayerLeft", async (int i) =>
		{ 
			players[i-1] = false; 
			await updateCache();
			this.StateHasChanged();
		});
		hubConnection.On("NewState", async () =>
		{ 
			await updateCache();
			this.StateHasChanged();
		});

		hubConnection.On<SelectCardInquiry>("SelectCard", async (inquirt) =>
		{
			await updateCache();
			this.StateHasChanged();

			var cards = collectionCache[inquirt.Collection].CardCollection.VisibleCards;
			await cardPrompt.Select(cards, async (card) =>
			{
				await hubConnection.SendAsync("CardSelected", inquirt.CorrespondenceId, card);
			}, required: inquirt.Required);
		});

		hubConnection.On<AskPlayerInquiry>("AskPlayer", async (inquirt) =>
		{
			await Dialogue.ShowDialog(inquirt.Message , async (result) =>
								{
								await hubConnection.SendAsync("PlayerAnswer", inquirt.CorrespondenceId, result);
							});
		});

		hubConnection.On<string>("Conclusion", async (message) =>
		{
			await Dialogue.ShowInfo(message, "Game ended");
		});

		await hubConnection.StartAsync();
		await hubConnection.SendAsync("join", game.SessionId);
		Http.DefaultRequestHeaders.Add("ClientID", hubConnection.ConnectionId);

		hands = game.Game.Hands;
		decks = game.Game.Decks;
		zones = game.Game.Zones;
		await updateCache();
		this.StateHasChanged();
	}

	public async void Stop()
	{
		await hubConnection.SendAsync("leave", game.SessionId);
		await hubConnection.StopAsync();
	}

	private void TogglePlayer(int index)
	{
		if (!players[index-1])
			hubConnection.SendAsync("selectPlayer", game.SessionId, index);
		else
			hubConnection.SendAsync("ReleasePlayer", game.SessionId, index);
	}

	private async Task updateCache()
	{
		game = await Http.GetFromJsonAsync<GameOverviewResponse>(game.Links["self"]);
		
		if (game.Game.NumberOfPlayers < players.Count)
		{
			for(int i = players.Count-1; i > game.Game.NumberOfPlayers-1; i--)
				players.RemoveAt(i);
		}
		else if (game.Game.NumberOfPlayers > players.Count)
		{
			for(int i = players.Count; i < game.Game.NumberOfPlayers; i++)
				players.Add(false);		
		}

		hands = game.Game.Hands;
		decks = game.Game.Decks;
		zones = game.Game.Zones;

		var response = await Http.GetFromJsonAsync<ActionListResponse>(game.Links["actions"]);

		GlobalActions = GetActions(response.Actions);

		foreach (var pair in hands)
			await UpdateCollectionCache(pair.Key, pair.Value);
		foreach (var pair in decks)
			await UpdateCollectionCache(pair.Key, pair.Value);		
		foreach (var pair in zones)
			await UpdateCollectionCache(pair.Key, pair.Value);		
	}

	private async Task UpdateCollectionCache(string name, string url)
	{
		var response = await Http.GetFromJsonAsync<CardCollectionResponse>(url);
		if (collectionCache.ContainsKey(name))
			collectionCache[name] = response;
		else
			collectionCache.Add(name, response);
	}

	private IEnumerable<CallBackAction> GetActions(IDictionary<string, string> actions)
	{
		foreach (var action in actions)
		{
			yield return new CallBackAction
			{
				Name = action.Key,
				Execute = async () =>
				{
					Console.WriteLine($"Call {action.Value}");
					var actionReponse = await Http.GetFromJsonAsync<ActionResponse>(action.Value);
					var dto = actionReponse.Action;

					var response = Http.PostAsync(action.Value, JsonContent.Create(dto)).ContinueWith(async (response) =>
					{
						if (response.Result.StatusCode == HttpStatusCode.OK)
						{
							await updateCache();
							this.StateHasChanged();
						}
					});
				}
			};
		}
	}
}